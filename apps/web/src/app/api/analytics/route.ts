import { NextRequest, NextResponse } from 'next/server';\nimport { createServerDatabaseClient } from '@data-snack/database';\n\nconst corsHeaders = {\n  'Access-Control-Allow-Origin': process.env.NODE_ENV === 'development' \n    ? '*' \n    : 'https://data-snack.com',\n  'Access-Control-Allow-Methods': 'GET, OPTIONS',\n  'Access-Control-Allow-Headers': 'Content-Type',\n  'Cache-Control': 'no-cache, no-store, must-revalidate',\n};\n\nexport async function OPTIONS() {\n  return new NextResponse(null, {\n    status: 204,\n    headers: corsHeaders,\n  });\n}\n\nexport async function GET(request: NextRequest) {\n  try {\n    const db = createServerDatabaseClient();\n    const searchParams = request.nextUrl.searchParams;\n    const timeframe = searchParams.get('timeframe') || '1h';\n    \n    // Calculate time range\n    const now = new Date();\n    let startTime: Date;\n    \n    switch (timeframe) {\n      case '1h':\n        startTime = new Date(now.getTime() - 60 * 60 * 1000);\n        break;\n      case '24h':\n        startTime = new Date(now.getTime() - 24 * 60 * 60 * 1000);\n        break;\n      case '7d':\n        startTime = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n        break;\n      default:\n        startTime = new Date(now.getTime() - 60 * 60 * 1000);\n    }\n    \n    // Query analytics data\n    const [eventsResult, usersResult, consentResult] = await Promise.all([\n      // Total events in timeframe\n      db\n        .from('events')\n        .select('*', { count: 'exact', head: true })\n        .gte('time', startTime.toISOString()),\n      \n      // Unique users in timeframe  \n      db\n        .from('events')\n        .select('user_id', { count: 'exact', head: true })\n        .gte('time', startTime.toISOString())\n        .not('user_id', 'is', null),\n      \n      // Consent statistics\n      db\n        .from('events')\n        .select('consent_state')\n        .eq('event_type', 'consent_change')\n        .gte('time', startTime.toISOString())\n        .limit(100),\n    ]);\n    \n    // Calculate consent statistics\n    const consentStats = {\n      total: consentResult.data?.length || 0,\n      analytics: 0,\n      marketing: 0,\n      personalization: 0,\n    };\n    \n    consentResult.data?.forEach((event: any) => {\n      if (event.consent_state?.analytics) consentStats.analytics++;\n      if (event.consent_state?.marketing) consentStats.marketing++;\n      if (event.consent_state?.personalization) consentStats.personalization++;\n    });\n    \n    // Get recent events by type\n    const eventsByType = await db\n      .from('events')\n      .select('event_type')\n      .gte('time', startTime.toISOString())\n      .limit(1000);\n    \n    const eventTypeStats = eventsByType.data?.reduce((acc: Record<string, number>, event: any) => {\n      acc[event.event_type] = (acc[event.event_type] || 0) + 1;\n      return acc;\n    }, {}) || {};\n    \n    // Calculate privacy score (percentage of users with analytics consent)\n    const privacyScore = consentStats.total > 0 \n      ? Math.round((consentStats.analytics / consentStats.total) * 100)\n      : 0;\n    \n    const response = {\n      timeframe,\n      timestamp: new Date().toISOString(),\n      stats: {\n        totalEvents: eventsResult.count || 0,\n        uniqueUsers: usersResult.count || 0,\n        privacyScore,\n        dataPoints: (eventsResult.count || 0) * 5, // Estimate 5 data points per event\n      },\n      consent: {\n        total: consentStats.total,\n        analytics: consentStats.analytics,\n        marketing: consentStats.marketing,\n        personalization: consentStats.personalization,\n      },\n      eventTypes: eventTypeStats,\n      health: {\n        database: 'connected',\n        lastUpdate: new Date().toISOString(),\n      },\n    };\n    \n    return NextResponse.json(response, {\n      headers: corsHeaders,\n    });\n    \n  } catch (error) {\n    console.error('[API] Analytics error:', error);\n    \n    // Return mock data if database is not available\n    const mockResponse = {\n      timeframe: request.nextUrl.searchParams.get('timeframe') || '1h',\n      timestamp: new Date().toISOString(),\n      stats: {\n        totalEvents: Math.floor(Math.random() * 10000) + 1000,\n        uniqueUsers: Math.floor(Math.random() * 500) + 100,\n        privacyScore: Math.floor(Math.random() * 40) + 60,\n        dataPoints: Math.floor(Math.random() * 50000) + 10000,\n      },\n      consent: {\n        total: Math.floor(Math.random() * 100) + 50,\n        analytics: Math.floor(Math.random() * 70) + 20,\n        marketing: Math.floor(Math.random() * 30) + 10,\n        personalization: Math.floor(Math.random() * 40) + 15,\n      },\n      eventTypes: {\n        page_view: Math.floor(Math.random() * 1000) + 500,\n        click: Math.floor(Math.random() * 800) + 300,\n        scroll: Math.floor(Math.random() * 600) + 200,\n        consent_change: Math.floor(Math.random() * 50) + 10,\n      },\n      health: {\n        database: 'mock-mode',\n        lastUpdate: new Date().toISOString(),\n        error: 'Database connection failed - showing mock data',\n      },\n    };\n    \n    return NextResponse.json(mockResponse, {\n      headers: corsHeaders,\n    });\n  }\n}\n