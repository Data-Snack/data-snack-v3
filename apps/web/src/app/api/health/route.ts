import { NextResponse } from 'next/server';\nimport { createServerDatabaseClient } from '@data-snack/database';\n\nexport async function GET() {\n  const startTime = Date.now();\n  \n  const health = {\n    status: 'healthy',\n    timestamp: new Date().toISOString(),\n    service: 'data-snack-api',\n    version: process.env.npm_package_version || '0.0.0',\n    environment: process.env.NODE_ENV || 'development',\n    uptime: process.uptime(),\n    checks: {\n      database: 'unknown',\n      memory: 'unknown',\n      tracking: 'unknown',\n    },\n  };\n  \n  try {\n    // Check database connection\n    const db = createServerDatabaseClient();\n    const { error } = await db.from('users').select('id').limit(1);\n    health.checks.database = error ? 'unhealthy' : 'healthy';\n  } catch (error) {\n    health.checks.database = 'unhealthy';\n  }\n  \n  // Check memory usage\n  try {\n    const memUsage = process.memoryUsage();\n    const memUsageMB = Math.round(memUsage.heapUsed / 1024 / 1024);\n    health.checks.memory = memUsageMB < 512 ? 'healthy' : 'warning';\n  } catch (error) {\n    health.checks.memory = 'unhealthy';\n  }\n  \n  // Check tracking service\n  try {\n    const trackingUrl = process.env.TRACKING_SERVER_URL;\n    if (trackingUrl) {\n      const response = await fetch(`${trackingUrl}/health`, {\n        method: 'GET',\n        timeout: 5000,\n      }).catch(() => null);\n      health.checks.tracking = response?.ok ? 'healthy' : 'unhealthy';\n    } else {\n      health.checks.tracking = 'not-configured';\n    }\n  } catch (error) {\n    health.checks.tracking = 'unhealthy';\n  }\n  \n  // Determine overall status\n  const hasUnhealthy = Object.values(health.checks).includes('unhealthy');\n  const hasWarning = Object.values(health.checks).includes('warning');\n  \n  if (hasUnhealthy) {\n    health.status = 'unhealthy';\n  } else if (hasWarning) {\n    health.status = 'warning';\n  } else {\n    health.status = 'healthy';\n  }\n  \n  const responseTime = Date.now() - startTime;\n  health.responseTime = `${responseTime}ms`;\n  \n  const statusCode = health.status === 'healthy' ? 200 : 503;\n  \n  return NextResponse.json(health, {\n    status: statusCode,\n    headers: {\n      'Cache-Control': 'no-cache, no-store, must-revalidate',\n      'Content-Type': 'application/json',\n    },\n  });\n}\n