'use client';\n\nimport { useState, useEffect } from 'react';\nimport { useDataSnack } from '@data-snack/tracking';\n\ninterface TrackingEvent {\n  id: string;\n  type: string;\n  timestamp: number;\n  properties: Record<string, any>;\n  consent: boolean;\n}\n\nexport function TelemetryPanel() {\n  const [events, setEvents] = useState<TrackingEvent[]>([]);\n  const [isLive, setIsLive] = useState(true);\n  const { sdk, consent } = useDataSnack();\n\n  useEffect(() => {\n    // Simulate live tracking events\n    const interval = setInterval(() => {\n      if (isLive) {\n        const mockEvent: TrackingEvent = {\n          id: `evt_${Date.now()}`,\n          type: ['page_view', 'click', 'scroll', 'hover'][Math.floor(Math.random() * 4)],\n          timestamp: Date.now(),\n          properties: {\n            url: window.location.href,\n            userAgent: navigator.userAgent.split(' ')[0],\n            screen: `${screen.width}x${screen.height}`,\n          },\n          consent: consent?.analytics || false,\n        };\n        \n        setEvents(prev => [mockEvent, ...prev.slice(0, 9)]); // Keep last 10 events\n      }\n    }, 2000);\n\n    return () => clearInterval(interval);\n  }, [isLive, consent]);\n\n  const toggleLive = () => {\n    setIsLive(!isLive);\n    if (sdk) {\n      sdk.track('telemetry_toggle', {\n        action: isLive ? 'pause' : 'resume',\n        timestamp: Date.now(),\n      });\n    }\n  };\n\n  return (\n    <div className=\"glass rounded-2xl p-8\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h3 className=\"text-2xl font-bold mb-2\">🔍 Live Telemetry</h3>\n          <p className=\"text-muted-foreground\">\n            Sieh in Echtzeit, welche Daten erfasst werden\n          </p>\n        </div>\n        \n        <div className=\"flex items-center gap-4\">\n          <div className={`flex items-center gap-2 px-3 py-2 rounded-full text-sm font-medium ${\n            consent?.analytics \n              ? 'bg-green-500/20 text-green-400' \n              : 'bg-red-500/20 text-red-400'\n          }`}>\n            <span className={`w-2 h-2 rounded-full ${\n              consent?.analytics ? 'bg-green-400' : 'bg-red-400'\n            }`}></span>\n            {consent?.analytics ? 'Tracking aktiv' : 'Nur essentiell'}\n          </div>\n          \n          <button\n            onClick={toggleLive}\n            className={`px-4 py-2 rounded-xl font-semibold transition-all duration-200 ${\n              isLive \n                ? 'bg-primary text-white hover:bg-primary/90' \n                : 'bg-gray-600 text-gray-200 hover:bg-gray-500'\n            }`}\n          >\n            {isLive ? '⏸️ Pause' : '▶️ Live'}\n          </button>\n        </div>\n      </div>\n      \n      <div className=\"space-y-3 max-h-96 overflow-y-auto\">\n        {events.length === 0 && (\n          <div className=\"text-center text-muted-foreground py-8\">\n            <div className=\"text-4xl mb-4\">📡</div>\n            <p>Warte auf Events...</p>\n          </div>\n        )}\n        \n        {events.map((event, index) => (\n          <div \n            key={event.id}\n            className={`flex items-center justify-between p-4 rounded-xl transition-all duration-300 ${\n              index === 0 ? 'bg-primary/10 border border-primary/20' : 'bg-white/5'\n            }`}\n          >\n            <div className=\"flex items-center gap-4\">\n              <div className=\"text-2xl\">\n                {event.type === 'page_view' && '👁️'}\n                {event.type === 'click' && '🖱️'}\n                {event.type === 'scroll' && '📜'}\n                {event.type === 'hover' && '👆'}\n              </div>\n              \n              <div>\n                <div className=\"font-semibold\">{event.type}</div>\n                <div className=\"text-sm text-muted-foreground\">\n                  {new Date(event.timestamp).toLocaleTimeString('de')}\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center gap-4\">\n              <div className=\"text-sm text-muted-foreground font-mono\">\n                {Object.keys(event.properties).length} properties\n              </div>\n              \n              <div className={`w-2 h-2 rounded-full ${\n                event.consent ? 'bg-green-400' : 'bg-red-400'\n              }`}></div>\n            </div>\n          </div>\n        ))}\n      </div>\n      \n      <div className=\"mt-6 pt-6 border-t border-white/10\">\n        <div className=\"flex items-center justify-between text-sm text-muted-foreground\">\n          <div>\n            📊 {events.length} Events in den letzten {Math.floor((Date.now() - (events[events.length - 1]?.timestamp || Date.now())) / 60000)} Minuten\n          </div>\n          <div>\n            🔒 {consent?.analytics ? 'Vollständiges Tracking' : 'Nur anonymisierte Basisdaten'}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n