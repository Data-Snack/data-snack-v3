import { type ClassValue, clsx } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\n// Utility for combining class names\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\n// Format numbers with locale\nexport function formatNumber(num: number, options?: Intl.NumberFormatOptions) {\n  return new Intl.NumberFormat('de-DE', options).format(num);\n}\n\n// Format currency\nexport function formatCurrency(amount: number, currency: string = 'EUR') {\n  return new Intl.NumberFormat('de-DE', {\n    style: 'currency',\n    currency,\n  }).format(amount);\n}\n\n// Format relative time\nexport function formatRelativeTime(date: Date | string) {\n  const rtf = new Intl.RelativeTimeFormat('de', { numeric: 'auto' });\n  const now = new Date();\n  const target = new Date(date);\n  const diffInSeconds = (target.getTime() - now.getTime()) / 1000;\n  \n  if (Math.abs(diffInSeconds) < 60) {\n    return rtf.format(Math.round(diffInSeconds), 'second');\n  }\n  \n  const diffInMinutes = diffInSeconds / 60;\n  if (Math.abs(diffInMinutes) < 60) {\n    return rtf.format(Math.round(diffInMinutes), 'minute');\n  }\n  \n  const diffInHours = diffInMinutes / 60;\n  if (Math.abs(diffInHours) < 24) {\n    return rtf.format(Math.round(diffInHours), 'hour');\n  }\n  \n  const diffInDays = diffInHours / 24;\n  return rtf.format(Math.round(diffInDays), 'day');\n}\n\n// Generate random ID\nexport function generateId(prefix?: string) {\n  const id = Math.random().toString(36).substr(2, 9);\n  return prefix ? `${prefix}_${id}` : id;\n}\n\n// Debounce function\nexport function debounce<T extends (...args: any[]) => any>(\n  func: T,\n  wait: number\n): (...args: Parameters<T>) => void {\n  let timeout: NodeJS.Timeout | null = null;\n  \n  return (...args: Parameters<T>) => {\n    if (timeout) clearTimeout(timeout);\n    timeout = setTimeout(() => func(...args), wait);\n  };\n}\n\n// Throttle function\nexport function throttle<T extends (...args: any[]) => any>(\n  func: T,\n  limit: number\n): (...args: Parameters<T>) => void {\n  let inThrottle: boolean = false;\n  \n  return (...args: Parameters<T>) => {\n    if (!inThrottle) {\n      func(...args);\n      inThrottle = true;\n      setTimeout(() => (inThrottle = false), limit);\n    }\n  };\n}\n\n// Color utilities\nexport function hexToHsl(hex: string) {\n  const r = parseInt(hex.slice(1, 3), 16) / 255;\n  const g = parseInt(hex.slice(3, 5), 16) / 255;\n  const b = parseInt(hex.slice(5, 7), 16) / 255;\n  \n  const max = Math.max(r, g, b);\n  const min = Math.min(r, g, b);\n  let h = 0;\n  let s = 0;\n  const l = (max + min) / 2;\n  \n  if (max !== min) {\n    const d = max - min;\n    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n    \n    switch (max) {\n      case r:\n        h = (g - b) / d + (g < b ? 6 : 0);\n        break;\n      case g:\n        h = (b - r) / d + 2;\n        break;\n      case b:\n        h = (r - g) / d + 4;\n        break;\n    }\n    h /= 6;\n  }\n  \n  return [Math.round(h * 360), Math.round(s * 100), Math.round(l * 100)];\n}\n\n// Privacy utilities\nexport function anonymizeIP(ip: string): string {\n  if (ip.includes(':')) {\n    // IPv6 - keep first 4 groups\n    const parts = ip.split(':');\n    return parts.slice(0, 4).join(':') + '::0';\n  } else {\n    // IPv4 - keep first 3 octets\n    const parts = ip.split('.');\n    return parts.slice(0, 3).join('.') + '.0';\n  }\n}\n\nexport function hashString(str: string): string {\n  let hash = 0;\n  if (str.length === 0) return hash.toString();\n  \n  for (let i = 0; i < str.length; i++) {\n    const char = str.charCodeAt(i);\n    hash = ((hash << 5) - hash) + char;\n    hash = hash & hash; // Convert to 32-bit integer\n  }\n  \n  return Math.abs(hash).toString(36);\n}\n\n// Browser detection utilities\nexport function getBrowserInfo() {\n  const ua = navigator.userAgent;\n  const browsers = {\n    chrome: /Chrome/.test(ua) && !/Chromium/.test(ua),\n    firefox: /Firefox/.test(ua),\n    safari: /Safari/.test(ua) && !/Chrome/.test(ua),\n    edge: /Edg/.test(ua),\n    opera: /OPR/.test(ua),\n  };\n  \n  const browser = Object.keys(browsers).find(key => browsers[key as keyof typeof browsers]) || 'unknown';\n  \n  return {\n    browser,\n    version: ua.match(new RegExp(`${browser}/([\\d.]+)`, 'i'))?.[1] || 'unknown',\n    mobile: /Mobile|Android|iP(hone|ad|od)/.test(ua),\n    platform: navigator.platform,\n    cookieEnabled: navigator.cookieEnabled,\n    onLine: navigator.onLine,\n  };\n}\n\n// Performance utilities\nexport function measurePerformance<T>(\n  name: string,\n  fn: () => T | Promise<T>\n): T | Promise<T> {\n  const start = performance.now();\n  const result = fn();\n  \n  if (result instanceof Promise) {\n    return result.finally(() => {\n      const duration = performance.now() - start;\n      console.log(`⏱️ ${name}: ${duration.toFixed(2)}ms`);\n    });\n  } else {\n    const duration = performance.now() - start;\n    console.log(`⏱️ ${name}: ${duration.toFixed(2)}ms`);\n    return result;\n  }\n}\n\n// Local storage with error handling\nexport const storage = {\n  get<T>(key: string, defaultValue?: T): T | undefined {\n    try {\n      const item = localStorage.getItem(key);\n      return item ? JSON.parse(item) : defaultValue;\n    } catch {\n      return defaultValue;\n    }\n  },\n  \n  set<T>(key: string, value: T): void {\n    try {\n      localStorage.setItem(key, JSON.stringify(value));\n    } catch (error) {\n      console.warn('Failed to save to localStorage:', error);\n    }\n  },\n  \n  remove(key: string): void {\n    try {\n      localStorage.removeItem(key);\n    } catch (error) {\n      console.warn('Failed to remove from localStorage:', error);\n    }\n  },\n  \n  clear(): void {\n    try {\n      localStorage.clear();\n    } catch (error) {\n      console.warn('Failed to clear localStorage:', error);\n    }\n  },\n};\n